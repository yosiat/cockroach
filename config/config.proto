// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto3";
package cockroach.storage.config;
option go_package = "config";

import "cockroach/proto/metadata.proto";
import "cockroach/proto/data.proto";
import "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
message GCPolicy {
  // TTLSeconds specifies the maximum age of a value before it's
  // garbage collected. Only older versions of values are garbage
  // collected. Specifying <=0 mean older versions are never GC'd.
  int32 ttl_seconds = 1 [(gogoproto.customname) = "TTLSeconds"];
}

// ZoneConfig holds configuration that is needed for a range of KV pairs.
message ZoneConfig {
  // ReplicaAttrs is a slice of Attributes, each describing required attributes
  // for each replica in the zone. The order in which the attributes are stored
  // in ReplicaAttrs is arbitrary and may change.
  repeated proto.Attributes replica_attrs = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"replicas,omitempty\""];
  int64 range_min_bytes = 2 [(gogoproto.moretags) = "yaml:\"range_min_bytes,omitempty\""];
  int64 range_max_bytes = 3 [(gogoproto.moretags) = "yaml:\"range_max_bytes,omitempty\""];
  // If GC policy is not set, uses the next highest, non-null policy
  // in the zone config hierarchy, up to the default policy if necessary.
  GCPolicy gc = 4 [(gogoproto.customname) = "GC", (gogoproto.moretags) = "yaml:\"gc,omitempty\""];
}

// PrefixConfigMap contains a slice of prefix configs, sorted by
// prefix. Along with various accessor methods, the config map
// also contains additional prefix configs in the slice to
// account for the ends of prefix ranges.
message PrefixConfigMap {
  repeated PrefixConfig configs = 1 [(gogoproto.nullable) = false];
}

// PrefixConfig relates a prefix key to a config object. PrefixConfig
// objects are the constituents of PrefixConfigMap objects. In order to
// support binary searches of hierarchical PrefixConfig objects,
// end-of-prefix PrefixConfig objects are added to a PrefixConfigMap to
// demarcate the end of a prefix range. Such end-of-range sentinels
// need to refer back to their parent prefix.
// The Canonical key refers to this parent PrefixConfig by its prefix.
message PrefixConfig {
  option (gogoproto.goproto_stringer) = false;

  bytes prefix = 1 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.Key"];
  bytes canonical = 2 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.Key"];
  ConfigUnion config = 3 [(gogoproto.nullable) = false];
}

message ConfigUnion {
  option (gogoproto.onlyone) = true;
  oneof value {
    ZoneConfig zone = 1;
  }
}

// ZoneDescriptor holds a zone config and the span [start, end) it applies to.
// []ZoneDescriptor implements the sort.Sort interface.
message ZoneDescriptor {
  bytes start = 1 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.Key"];
  bytes end = 2 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/proto.Key"];
  bytes cfg = 3;
}

// DatabaseRegistry holds information about a given database,
// including a list of tables.
message DatabaseRegistry {
	string name = 1;
  map<string, uint32> tables = 2 [(gogoproto.nullable) = false];
}

// SystemConfig describes the SystemDBSpan in a nicely organized way.
// TODO(marc): it's a bit redundant to have maps in both directions,
// but we do need them for lookups.
// TODO(marc): we should probably move sql/structured.proto elsewhere
// and include the decoded descriptors here. They could also go into
// DatabaseRegistry.
message SystemConfig {
  // Map of "database name" -> "database ID".
	map<string, uint32> database_names = 1 [(gogoproto.nullable) = false]; 
  // Map of "database ID" -> "database registry".
  map<uint32, DatabaseRegistry> databases = 2 [(gogoproto.nullable) = false];
  // Map of "object ID" -> "object descriptor". This includes
  // both databases and tables.
  map<uint32, bytes> descriptors = 3 [(gogoproto.nullable) = false];
  // Slice of zone config descriptors. These are sorted by keys.
  // This is a sparse list. Any range not found in the list uses
  // the default zone config.
  repeated ZoneDescriptor zones = 4 [(gogoproto.nullable) = false];
  // TODO(marc): remove when no longer needed.
  repeated proto.KeyValue values = 5 [(gogoproto.nullable) = false];
}
